// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"
	models "trainig/exercise1/internal/models"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductService) AddProduct(ctx *gofr.Context, product *models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductServiceMockRecorder) AddProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductService)(nil).AddProduct), ctx, product)
}

// GetProduct mocks base method.
func (m *MockProductService) GetProduct(ctx *gofr.Context, product *models.Product, id int) (models.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, product, id)
	ret0, _ := ret[0].(models.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductServiceMockRecorder) GetProduct(ctx, product, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductService)(nil).GetProduct), ctx, product, id)
}

// MockVariantService is a mock of VariantService interface.
type MockVariantService struct {
	ctrl     *gomock.Controller
	recorder *MockVariantServiceMockRecorder
}

// MockVariantServiceMockRecorder is the mock recorder for MockVariantService.
type MockVariantServiceMockRecorder struct {
	mock *MockVariantService
}

// NewMockVariantService creates a new mock instance.
func NewMockVariantService(ctrl *gomock.Controller) *MockVariantService {
	mock := &MockVariantService{ctrl: ctrl}
	mock.recorder = &MockVariantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariantService) EXPECT() *MockVariantServiceMockRecorder {
	return m.recorder
}

// AddVariant mocks base method.
func (m *MockVariantService) AddVariant(ctx *gofr.Context, variant *models.Variant) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVariant", ctx, variant)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVariant indicates an expected call of AddVariant.
func (mr *MockVariantServiceMockRecorder) AddVariant(ctx, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVariant", reflect.TypeOf((*MockVariantService)(nil).AddVariant), ctx, variant)
}

// GetVariant mocks base method.
func (m *MockVariantService) GetVariant(ctx *gofr.Context, productID, variantID string) (*models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariant", ctx, productID, variantID)
	ret0, _ := ret[0].(*models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariant indicates an expected call of GetVariant.
func (mr *MockVariantServiceMockRecorder) GetVariant(ctx, productID, variantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariant", reflect.TypeOf((*MockVariantService)(nil).GetVariant), ctx, productID, variantID)
}
